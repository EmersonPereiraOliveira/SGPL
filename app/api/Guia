Nesse tutorial, vamos aprender como configurar o ambiente de desenvolvimento no Linux e criar
um script Python bem pequeno que funcionará como um CRUD de postagens para um blog. O nosso
pequeno script irá funcionar como uma API que receberá as requisições via HTTP no formato JSON
e fará uso do SQLite como banco de dados para salvar as postagens e recuperar as informações
para o cliente.

http://ithappens.club/criando-uma-api-restful-em-30-minutos-com-python/


#Status Code
https://github.com/waldemarnt/http-status-codes


http://www.patricksoftwareblog.com/receiving-files-with-a-flask-rest-api/

import requests


URL_BASE = 'http://localhost:5000/'
auth = (‘EMAIL_ADDRESS', 'PASSWORD')

# API v1.2 - Get Authentication Token
print('Retrieving authentication token...')
url = URL_BASE + 'get-auth-token'
r = requests.get(url, auth=auth)
print(r.status_code)
print(r.headers)
auth_request = r.json()
token_auth = (auth_request['token'], 'unused')

# API v1.2 - GET (All)
print('Retrieving all recipes...')
url = URL_BASE + 'api/v1_2/recipes'
r = requests.get(url, auth=token_auth)
print(r.status_code)
print(r.text)

# API v1.2 - PUT (Metadata)
print('Updating recipe #2...')
url = URL_BASE + 'api/v1_2/recipes/2'
json_data = {'title': 'Updated recipe', 'description': 'My favorite recipe'}
r = requests.put(url, json=json_data, auth=token_auth)
print(r.status_code)
print(r.text)

# API v1.2 - PUT (Add image)
print('Updating recipe #2 with recipe image...')
url = URL_BASE + 'api/v1_2/recipes/2'
r = requests.put(url, auth=token_auth, files={'recipe_image': open('IMG_6127.JPG', 'rb')})
print(r.status_code)
print(r.text)